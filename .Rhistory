arrange(playerId, period.x) %>%
mutate(xg_per_90_lag = lag(xg_per_90),
xg_diff = xg_per_90 - xg_per_90_lag,
elo_excess_diff = elo_excess - lag(elo_excess),
country_mean_diff = country_mean - lag(country_mean),
team_change = ifelse(club_name == lag(club_name), 0, 1),
league_change = ifelse(country == lag(country), 0, 1)) %>%
filter(!is.na(xg_per_90_lag))
lm_fit <- lm(formula = xg_per_90 ~ xg_per_90_lag + elo_excess_diff, data = align_ext)
summary(lm_fit)
lm_fit <- lm(formula = xg_per_90 ~ xg_per_90_lag + country_mean_diff, data = align_ext)
summary(lm_fit)
lm_fit <- lm(formula = xg_per_90 ~ xg_per_90_lag + team_change, data = align_ext)
summary(lm_fit)
lm_fit <- lm(formula = xg_per_90 ~ xg_per_90_lag + league_change, data = align_ext)
summary(lm_fit)
lm_fit <- lm(formula = xg_per_90 ~ xg_per_90_lag + elo_excess_diff + league_change, data = align_ext)
summary(lm_fit)
lm_fit <- lm(formula = xg_per_90 ~ xg_per_90_lag, data = align_ext)
summary(lm_fit)
lm_fit <- lm(formula = xg_per_90 ~ xg_per_90_lag + elo_excess_diff + league_change, data = align_ext)
summary(lm_fit)
lm_fit <- lm(formula = xg_per_90 ~ xg_per_90_lag + elo_excess_diff + league_change, data = align_ext %>% filter(team_change == 1))
summary(lm_fit)
lm_fit <- lm(formula = xg_per_90 ~ xg_per_90_lag + country_mean_diff, data = align_ext %>% filter(league_change == 1))
summary(lm_fit)
lm_fit <- lm(formula = xg_per_90 ~ xg_per_90_lag + elo_excess_diff, data = align_ext %>% filter(team_change))
lm_fit <- lm(formula = xg_per_90 ~ xg_per_90_lag + elo_excess_diff, data = align_ext %>% filter(team_change == 1))
summary(lm_fit)
lm_fit <- lm(formula = xg_per_90 ~ xg_per_90_lag, data = align_ext %>% filter(team_change == 1))
summary(lm_fit)
library(tidyverse) # dataframe manipulation
library(dbplyr) # database access
library(DBI) # database access
team <- 26
window <- 5
challenge_actions <- c("Interception", "BallRecovery", "Dispossessed", "Tackle", "Clearance", "BlockedPass", "BallTouch", "Foul")
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
matches <- tbl(con, "matches") %>%
filter(season %in% c("2009/2010", "2010/2011", "2011/2012", "2012/2013", "2013/2014",
"2014/2015", "2015/2016", "2016/2017", "2017/2018")) %>%
#filter(season %in% c("2016/2017")) %>%
filter(home_team_id == team || away_team_id == team) %>%
collect()
DBI::dbDisconnect(con)
match_ids <- unique(matches$match_id)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
matches <- tbl(con, "matches") %>%
filter(season %in% c("2009/2010", "2010/2011", "2011/2012", "2012/2013", "2013/2014",
"2014/2015", "2015/2016", "2016/2017", "2017/2018")) %>%
#filter(season %in% c("2016/2017")) %>%
filter(home_team_id == team || away_team_id == team) %>%
collect()
DBI::dbDisconnect(con)
matches_summary <- matches %>%
group_by(season, league) %>%
summarize(count = n(), .groups = 'drop_last')
match_ids <- unique(matches$match_id)
View(matches_summary)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
matches <- tbl(con, "matches") %>%
filter(season %in% c("2009/2010", "2010/2011", "2011/2012", "2012/2013", "2013/2014",
"2014/2015", "2015/2016", "2016/2017", "2017/2018")) %>%
#filter(season %in% c("2016/2017")) %>%
filter(league %in% c("England", "Germany", "Spain")) %>%
filter(home_team_id == team || away_team_id == team) %>%
collect()
DBI::dbDisconnect(con)
matches_summary <- matches %>%
group_by(season, league) %>%
summarize(count = n(), .groups = 'drop_last')
match_ids <- unique(matches$match_id)
View(matches_summary)
#match_ids <- c("1201947")
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
events <- tbl(con, "events") %>%
filter(match_id %in% match_ids) %>%
group_by(match_id) %>%
mutate(isThrow = if_else(qualifiers %like% "%ThrowIn%" && is.na(isShot), 1, 0),
to_head = if_else(qualifiers %like% "%Head%", 1, 0),
throw_target = playerId,
throw_in_success = if_else(isThrow == 1 && outcome == "Successful", 1, 0),
shot_for = if_else(isShot == 1 && teamId == team, 1, 0),
pass_for = if_else(type_name == "Pass" && outcome == "Successful" && teamId == team, 1, 0),
challenge = if_else(type_name %in% challenge_actions && teamId != team, 1, 0),
clearance_for = if_else(type_name %in% c("Clearance") && teamId == team, 1, 0),
location_x = as.numeric(location_x)/100*105, location_y = as.numeric(location_y)/100*68,
PassEndX = as.numeric(PassEndX)/100*105, PassEndY = as.numeric(PassEndY)/100*68,
distance = sqrt((location_x - PassEndX)*(location_x - PassEndX) + (location_y - PassEndY)*(location_y - PassEndY)),
distance_wide = abs(location_y - PassEndY),
time = minute*60 + second) %>%
filter(isTouch == 1 || isThrow == 1) %>%
arrange(period, time) %>%
mutate(to_head = lead(to_head),
throw_target = if_else(type_name == "Pass" && outcome == "Successful", lead(throw_target), NA),
goals_for = if_else(isGoal == "1" && teamId == team, 1, 0),
goals_against = if_else(isGoal == "1" && teamId != team, 1, 0),
game_state = cumsum(goals_for) - cumsum(goals_against), # Game State
m_from_center = abs(location_x - 52.5), # Deviation from middle
time_since_last_touch = time - lag(time)) %>% # Time since last touch
window_frame(-window, -1) %>%
mutate(location_mean = mean(if_else(teamId == team, location_x, 100-location_x), na.rm = TRUE),
m_from_last_touches = abs(location_x - location_mean)) %>% # Location relative to previous touch
window_frame(1, window) %>%
mutate(shot_for = sum(shot_for, na.rm = TRUE), # Shot within 5 touches
challenged = sum(challenge, na.rm = TRUE), # Challenge within 5 touches
cleared = sum(clearance_for, na.rm = TRUE),
uninterrupted_passes = sum(pass_for, na.rm = TRUE), # Uninterrupted passes within 5 touches
distance_passed = sum(pass_for*distance, na.rm = TRUE), # Distance passed within 5 touches
distance_passed_wide = sum(pass_for*distance_wide, na.rm = TRUE)) %>% # Distance passed wide within 5 touches
filter(isThrow == 1 && teamId == team) %>%
select(event_id, match_id, minute, second, playerId, location_x, location_y, PassEndX, PassEndY, distance, game_state, m_from_center,
time_since_last_touch, m_from_last_touches, shot_for, challenged, cleared, to_head, throw_target, throw_in_success,
uninterrupted_passes, distance_passed, distance_passed_wide) %>%
collect()
DBI::dbDisconnect(con)
events_clean <- events %>%
mutate(shot_for = if_else(is.na(shot_for), 0, sign(shot_for)),
challenged = sign(challenged),
location_thirds = if_else(location_x <= 105/3, "Defensive", if_else(location_x >= 105*2/3, "Offensive", "Middle")),
prep_time = if_else(time_since_last_touch <= 5, "short", "long"),
taken_quickly = if_else(time_since_last_touch <= 5, 1, 0),
throw_angle = atan2(abs(PassEndY - location_y), PassEndX - location_x)*180/pi,
throw_angle_class = if_else(throw_angle <= 45, "Forward", if_else(throw_angle >= 135, "Backward", "Straight")),
throw_in_taker = playerId) %>%
left_join(matches %>% select(match_id, league, season), by = "match_id")
agg <- events_clean %>%
group_by(season) %>%
summarize(count = n(),
avg_distance = mean(distance, na.rm = TRUE),
avg_time_to_throw = mean(time_since_last_touch, na.rm = TRUE),
taken_quickly = mean(taken_quickly, na.rm = TRUE),
pct_challenged = mean(challenged, na.rm = TRUE),
pct_shot = mean(shot_for, na.rm = TRUE),
pct_cleared = mean(cleared, na.rm = TRUE),
pct_to_head = mean(to_head, na.rm = TRUE),
pct_success = mean(throw_in_success, na.rm = TRUE),
avg_passes = mean(uninterrupted_passes, na.rm = TRUE),
avg_passed_m = mean(distance_passed, na.rm = TRUE),
avg_passed_m_w = mean(distance_passed_wide, na.rm = TRUE),
.groups = 'drop_last')
View(agg)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
matches <- tbl(con, "matches") %>%
filter(season %in% c("2009/2010", "2010/2011", "2011/2012", "2012/2013", "2013/2014",
"2014/2015", "2015/2016", "2016/2017", "2017/2018", "2018/2019", "2019/2020")) %>%
#filter(season %in% c("2016/2017")) %>%
filter(league %in% c("England", "Germany", "Spain")) %>%
filter(home_team_id == team || away_team_id == team) %>%
collect()
DBI::dbDisconnect(con)
matches_summary <- matches %>%
group_by(season, league) %>%
summarize(count = n(), .groups = 'drop_last')
match_ids <- unique(matches$match_id)
View(matches_summary)
library(tidyverse) # dataframe manipulation
library(dbplyr) # database access
library(DBI) # database access
team <- 26
window <- 5
challenge_actions <- c("Interception", "BallRecovery", "Dispossessed", "Tackle", "Clearance", "BlockedPass", "BallTouch", "Foul")
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
matches <- tbl(con, "matches") %>%
filter(season %in% c("2009/2010", "2010/2011", "2011/2012", "2012/2013", "2013/2014",
"2014/2015", "2015/2016", "2016/2017", "2017/2018", "2018/2019", "2019/2020")) %>%
#filter(season %in% c("2016/2017")) %>%
filter(league %in% c("England", "Germany", "Spain")) %>%
filter(home_team_id == team || away_team_id == team) %>%
collect()
DBI::dbDisconnect(con)
matches_summary <- matches %>%
group_by(season, league) %>%
summarize(count = n(), .groups = 'drop_last')
match_ids <- unique(matches$match_id)
#match_ids <- c("1201947")
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
events <- tbl(con, "events") %>%
filter(match_id %in% match_ids) %>%
group_by(match_id) %>%
mutate(isThrow = if_else(qualifiers %like% "%ThrowIn%" && is.na(isShot), 1, 0),
to_head = if_else(qualifiers %like% "%Head%", 1, 0),
throw_target = playerId,
throw_in_success = if_else(isThrow == 1 && outcome == "Successful", 1, 0),
shot_for = if_else(isShot == 1 && teamId == team, 1, 0),
pass_for = if_else(type_name == "Pass" && outcome == "Successful" && teamId == team, 1, 0),
challenge = if_else(type_name %in% challenge_actions && teamId != team, 1, 0),
clearance_for = if_else(type_name %in% c("Clearance") && teamId == team, 1, 0),
location_x = as.numeric(location_x)/100*105, location_y = as.numeric(location_y)/100*68,
PassEndX = as.numeric(PassEndX)/100*105, PassEndY = as.numeric(PassEndY)/100*68,
distance = sqrt((location_x - PassEndX)*(location_x - PassEndX) + (location_y - PassEndY)*(location_y - PassEndY)),
distance_wide = abs(location_y - PassEndY),
time = minute*60 + second) %>%
filter(isTouch == 1 || isThrow == 1) %>%
arrange(period, time) %>%
mutate(to_head = lead(to_head),
throw_target = if_else(type_name == "Pass" && outcome == "Successful", lead(throw_target), NA),
goals_for = if_else(isGoal == "1" && teamId == team, 1, 0),
goals_against = if_else(isGoal == "1" && teamId != team, 1, 0),
game_state = cumsum(goals_for) - cumsum(goals_against), # Game State
m_from_center = abs(location_x - 52.5), # Deviation from middle
time_since_last_touch = time - lag(time)) %>% # Time since last touch
window_frame(-window, -1) %>%
mutate(location_mean = mean(if_else(teamId == team, location_x, 100-location_x), na.rm = TRUE),
m_from_last_touches = abs(location_x - location_mean)) %>% # Location relative to previous touch
window_frame(1, window) %>%
mutate(shot_for = sum(shot_for, na.rm = TRUE), # Shot within 5 touches
challenged = sum(challenge, na.rm = TRUE), # Challenge within 5 touches
cleared = sum(clearance_for, na.rm = TRUE),
uninterrupted_passes = sum(pass_for, na.rm = TRUE), # Uninterrupted passes within 5 touches
distance_passed = sum(pass_for*distance, na.rm = TRUE), # Distance passed within 5 touches
distance_passed_wide = sum(pass_for*distance_wide, na.rm = TRUE)) %>% # Distance passed wide within 5 touches
filter(isThrow == 1 && teamId == team) %>%
select(event_id, match_id, minute, second, playerId, location_x, location_y, PassEndX, PassEndY, distance, game_state, m_from_center,
time_since_last_touch, m_from_last_touches, shot_for, challenged, cleared, to_head, throw_target, throw_in_success,
uninterrupted_passes, distance_passed, distance_passed_wide) %>%
collect()
DBI::dbDisconnect(con)
events_clean <- events %>%
mutate(shot_for = if_else(is.na(shot_for), 0, sign(shot_for)),
challenged = sign(challenged),
location_thirds = if_else(location_x <= 105/3, "Defensive", if_else(location_x >= 105*2/3, "Offensive", "Middle")),
prep_time = if_else(time_since_last_touch <= 5, "short", "long"),
taken_quickly = if_else(time_since_last_touch <= 5, 1, 0),
throw_angle = atan2(abs(PassEndY - location_y), PassEndX - location_x)*180/pi,
throw_angle_class = if_else(throw_angle <= 45, "Forward", if_else(throw_angle >= 135, "Backward", "Straight")),
throw_in_taker = playerId) %>%
left_join(matches %>% select(match_id, league, season), by = "match_id")
agg <- events_clean %>%
group_by(season) %>%
summarize(count = n(),
avg_distance = mean(distance, na.rm = TRUE),
avg_time_to_throw = mean(time_since_last_touch, na.rm = TRUE),
taken_quickly = mean(taken_quickly, na.rm = TRUE),
pct_challenged = mean(challenged, na.rm = TRUE),
pct_shot = mean(shot_for, na.rm = TRUE),
pct_cleared = mean(cleared, na.rm = TRUE),
pct_to_head = mean(to_head, na.rm = TRUE),
pct_success = mean(throw_in_success, na.rm = TRUE),
avg_passes = mean(uninterrupted_passes, na.rm = TRUE),
avg_passed_m = mean(distance_passed, na.rm = TRUE),
avg_passed_m_w = mean(distance_passed_wide, na.rm = TRUE),
.groups = 'drop_last')
View(agg)
throw_in_summary <- function(team){
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
matches <- tbl(con, "matches") %>%
filter(season %in% c("2009/2010", "2010/2011", "2011/2012", "2012/2013", "2013/2014",
"2014/2015", "2015/2016", "2016/2017", "2017/2018", "2018/2019", "2019/2020")) %>%
#filter(season %in% c("2016/2017")) %>%
filter(league %in% c("England", "Germany", "Spain")) %>%
filter(home_team_id == team || away_team_id == team) %>%
collect()
DBI::dbDisconnect(con)
matches_summary <- matches %>%
group_by(season, league) %>%
summarize(count = n(), .groups = 'drop_last')
match_ids <- unique(matches$match_id)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
events <- tbl(con, "events") %>%
filter(match_id %in% match_ids) %>%
group_by(match_id) %>%
mutate(isThrow = if_else(qualifiers %like% "%ThrowIn%" && is.na(isShot), 1, 0),
to_head = if_else(qualifiers %like% "%Head%", 1, 0),
throw_target = playerId,
throw_in_success = if_else(isThrow == 1 && outcome == "Successful", 1, 0),
shot_for = if_else(isShot == 1 && teamId == team, 1, 0),
pass_for = if_else(type_name == "Pass" && outcome == "Successful" && teamId == team, 1, 0),
challenge = if_else(type_name %in% challenge_actions && teamId != team, 1, 0),
clearance_for = if_else(type_name %in% c("Clearance") && teamId == team, 1, 0),
location_x = as.numeric(location_x)/100*105, location_y = as.numeric(location_y)/100*68,
PassEndX = as.numeric(PassEndX)/100*105, PassEndY = as.numeric(PassEndY)/100*68,
distance = sqrt((location_x - PassEndX)*(location_x - PassEndX) + (location_y - PassEndY)*(location_y - PassEndY)),
distance_wide = abs(location_y - PassEndY),
time = minute*60 + second) %>%
filter(isTouch == 1 || isThrow == 1) %>%
arrange(period, time) %>%
mutate(to_head = lead(to_head),
throw_target = if_else(type_name == "Pass" && outcome == "Successful", lead(throw_target), NA),
goals_for = if_else(isGoal == "1" && teamId == team, 1, 0),
goals_against = if_else(isGoal == "1" && teamId != team, 1, 0),
game_state = cumsum(goals_for) - cumsum(goals_against), # Game State
m_from_center = abs(location_x - 52.5), # Deviation from middle
time_since_last_touch = time - lag(time)) %>% # Time since last touch
window_frame(-window, -1) %>%
mutate(location_mean = mean(if_else(teamId == team, location_x, 100-location_x), na.rm = TRUE),
m_from_last_touches = abs(location_x - location_mean)) %>% # Location relative to previous touch
window_frame(1, window) %>%
mutate(shot_for = sum(shot_for, na.rm = TRUE), # Shot within 5 touches
challenged = sum(challenge, na.rm = TRUE), # Challenge within 5 touches
cleared = sum(clearance_for, na.rm = TRUE),
uninterrupted_passes = sum(pass_for, na.rm = TRUE), # Uninterrupted passes within 5 touches
distance_passed = sum(pass_for*distance, na.rm = TRUE), # Distance passed within 5 touches
distance_passed_wide = sum(pass_for*distance_wide, na.rm = TRUE)) %>% # Distance passed wide within 5 touches
filter(isThrow == 1 && teamId == team) %>%
select(event_id, match_id, minute, second, playerId, location_x, location_y, PassEndX, PassEndY, distance, game_state, m_from_center,
time_since_last_touch, m_from_last_touches, shot_for, challenged, cleared, to_head, throw_target, throw_in_success,
uninterrupted_passes, distance_passed, distance_passed_wide) %>%
collect()
DBI::dbDisconnect(con)
events_clean <- events %>%
mutate(shot_for = if_else(is.na(shot_for), 0, sign(shot_for)),
challenged = sign(challenged),
location_thirds = if_else(location_x <= 105/3, "Defensive", if_else(location_x >= 105*2/3, "Offensive", "Middle")),
prep_time = if_else(time_since_last_touch <= 5, "short", "long"),
taken_quickly = if_else(time_since_last_touch <= 5, 1, 0),
throw_angle = atan2(abs(PassEndY - location_y), PassEndX - location_x)*180/pi,
throw_angle_class = if_else(throw_angle <= 45, "Forward", if_else(throw_angle >= 135, "Backward", "Straight")),
throw_in_taker = playerId) %>%
left_join(matches %>% select(match_id, league, season), by = "match_id")
agg <- events_clean %>%
group_by(season) %>%
summarize(count = n(),
avg_distance = mean(distance, na.rm = TRUE),
avg_time_to_throw = mean(time_since_last_touch, na.rm = TRUE),
taken_quickly = mean(taken_quickly, na.rm = TRUE),
pct_challenged = mean(challenged, na.rm = TRUE),
pct_shot = mean(shot_for, na.rm = TRUE),
pct_cleared = mean(cleared, na.rm = TRUE),
pct_to_head = mean(to_head, na.rm = TRUE),
pct_success = mean(throw_in_success, na.rm = TRUE),
avg_passes = mean(uninterrupted_passes, na.rm = TRUE),
avg_passed_m = mean(distance_passed, na.rm = TRUE),
avg_passed_m_w = mean(distance_passed_wide, na.rm = TRUE),
.groups = 'drop_last')
agg
}
team_agg <- throw_in_summary(26)
View(team_agg)
teams <- c(26, 167)
to_concat <- list()
for(team in teams){
team_agg <- throw_in_summary(team) %>%
mutate(teamId = team)
to_concat[[team]] <- team_agg
}
full_agg <- bind_rows(to_concat)
View(full_agg)
teams <- c(26, 167, 32, 14)
to_concat <- list()
for(team in teams){
team_agg <- throw_in_summary(team) %>%
mutate(teamId = team)
to_concat[[team]] <- team_agg
}
full_agg <- bind_rows(to_concat)
View(agg)
View(full_agg)
teams <- c(26, 167, 32, 14, 29, 15, 31, 30)
to_concat <- list()
for(team in teams){
team_agg <- throw_in_summary(team) %>%
mutate(teamId = team)
to_concat[[team]] <- team_agg
}
full_agg <- bind_rows(to_concat) %>%
filter(count > 500)
View(full_agg)
teams <- c(26, 167, 32, 14, 29, 15, 31, 30, 13, 161, 170, 211, 162, 24, 18)
to_concat <- list()
for(team in teams){
team_agg <- throw_in_summary(team) %>%
mutate(teamId = team)
to_concat[[team]] <- team_agg
}
full_agg <- bind_rows(to_concat) %>%
filter(count > 500)
View(full_agg)
events_clean <- events %>%
mutate(shot_for = if_else(is.na(shot_for), 0, sign(shot_for)),
challenged = sign(challenged),
location_thirds = if_else(location_x <= 105/3, "Defensive", if_else(location_x >= 105*2/3, "Offensive", "Middle")),
prep_time = if_else(time_since_last_touch <= 5, "short", "long"),
taken_quickly = if_else(time_since_last_touch <= 5, 1, 0),
throw_angle = atan2(abs(PassEndY - location_y), PassEndX - location_x)*180/pi,
throw_angle_class = if_else(throw_angle <= 45, "Forward", if_else(throw_angle >= 135, "Backward", "Straight")),
game_state_class = if_else(abs(game_state) <= 1, "Competitive", "Non-Competitive"),
game_state_class = if_else(minute <= 70, "Regular Play", "Late"),
throw_in_taker = playerId) %>%
left_join(matches %>% select(match_id, league, season), by = "match_id")
agg <- events_clean %>%
group_by(season) %>%
summarize(count = n(),
avg_distance = mean(distance, na.rm = TRUE),
avg_time_to_throw = mean(time_since_last_touch, na.rm = TRUE),
taken_quickly = mean(taken_quickly, na.rm = TRUE),
pct_challenged = mean(challenged, na.rm = TRUE),
pct_shot = mean(shot_for, na.rm = TRUE),
pct_cleared = mean(cleared, na.rm = TRUE),
pct_to_head = mean(to_head, na.rm = TRUE),
pct_success = mean(throw_in_success, na.rm = TRUE),
avg_passes = mean(uninterrupted_passes, na.rm = TRUE),
avg_passed_m = mean(distance_passed, na.rm = TRUE),
avg_passed_m_w = mean(distance_passed_wide, na.rm = TRUE),
.groups = 'drop_last')
View(agg)
events_clean <- events %>%
mutate(shot_for = if_else(is.na(shot_for), 0, sign(shot_for)),
challenged = sign(challenged),
location_thirds = if_else(location_x <= 105/3, "Defensive", if_else(location_x >= 105*2/3, "Offensive", "Middle")),
prep_time = if_else(time_since_last_touch <= 5, "short", "long"),
taken_quickly = if_else(time_since_last_touch <= 5, 1, 0),
throw_angle = atan2(abs(PassEndY - location_y), PassEndX - location_x)*180/pi,
throw_angle_class = if_else(throw_angle <= 45, "Forward", if_else(throw_angle >= 135, "Backward", "Straight")),
game_state_class = if_else(abs(game_state) <= 1, "Competitive", "Non-Competitive"),
game_time_class = if_else(minute <= 70, "Regular Play", "Late"),
throw_in_taker = playerId) %>%
left_join(matches %>% select(match_id, league, season), by = "match_id")
agg <- events_clean %>%
group_by(game_time_class) %>%
summarize(count = n(),
avg_distance = mean(distance, na.rm = TRUE),
avg_time_to_throw = mean(time_since_last_touch, na.rm = TRUE),
taken_quickly = mean(taken_quickly, na.rm = TRUE),
pct_challenged = mean(challenged, na.rm = TRUE),
pct_shot = mean(shot_for, na.rm = TRUE),
pct_cleared = mean(cleared, na.rm = TRUE),
pct_to_head = mean(to_head, na.rm = TRUE),
pct_success = mean(throw_in_success, na.rm = TRUE),
avg_passes = mean(uninterrupted_passes, na.rm = TRUE),
avg_passed_m = mean(distance_passed, na.rm = TRUE),
avg_passed_m_w = mean(distance_passed_wide, na.rm = TRUE),
.groups = 'drop_last')
View(agg)
agg <- events_clean %>%
group_by(game_state_class, game_time_class) %>%
summarize(count = n(),
avg_distance = mean(distance, na.rm = TRUE),
avg_time_to_throw = mean(time_since_last_touch, na.rm = TRUE),
taken_quickly = mean(taken_quickly, na.rm = TRUE),
pct_challenged = mean(challenged, na.rm = TRUE),
pct_shot = mean(shot_for, na.rm = TRUE),
pct_cleared = mean(cleared, na.rm = TRUE),
pct_to_head = mean(to_head, na.rm = TRUE),
pct_success = mean(throw_in_success, na.rm = TRUE),
avg_passes = mean(uninterrupted_passes, na.rm = TRUE),
avg_passed_m = mean(distance_passed, na.rm = TRUE),
avg_passed_m_w = mean(distance_passed_wide, na.rm = TRUE),
.groups = 'drop_last')
View(agg)
events_clean <- events %>%
mutate(shot_for = if_else(is.na(shot_for), 0, sign(shot_for)),
challenged = sign(challenged),
location_thirds = if_else(location_x <= 105/3, "Defensive", if_else(location_x >= 105*2/3, "Offensive", "Middle")),
prep_time = if_else(time_since_last_touch <= 5, "short", "long"),
taken_quickly = if_else(time_since_last_touch <= 5, 1, 0),
throw_angle = atan2(abs(PassEndY - location_y), PassEndX - location_x)*180/pi,
throw_angle_class = if_else(throw_angle <= 45, "Forward", if_else(throw_angle >= 135, "Backward", "Straight")),
game_state_class = if_else(game_state == 1, "Competitive", "Non-Competitive"),
game_time_class = if_else(minute <= 70, "Regular Play", "Late"),
throw_in_taker = playerId) %>%
left_join(matches %>% select(match_id, league, season), by = "match_id")
agg <- events_clean %>%
group_by(game_state_class, game_time_class) %>%
summarize(count = n(),
avg_distance = mean(distance, na.rm = TRUE),
avg_time_to_throw = mean(time_since_last_touch, na.rm = TRUE),
taken_quickly = mean(taken_quickly, na.rm = TRUE),
pct_challenged = mean(challenged, na.rm = TRUE),
pct_shot = mean(shot_for, na.rm = TRUE),
pct_cleared = mean(cleared, na.rm = TRUE),
pct_to_head = mean(to_head, na.rm = TRUE),
pct_success = mean(throw_in_success, na.rm = TRUE),
avg_passes = mean(uninterrupted_passes, na.rm = TRUE),
avg_passed_m = mean(distance_passed, na.rm = TRUE),
avg_passed_m_w = mean(distance_passed_wide, na.rm = TRUE),
.groups = 'drop_last')
agg <- events_clean %>%
group_by(season, game_state_class, game_time_class) %>%
summarize(count = n(),
avg_distance = mean(distance, na.rm = TRUE),
avg_time_to_throw = mean(time_since_last_touch, na.rm = TRUE),
taken_quickly = mean(taken_quickly, na.rm = TRUE),
pct_challenged = mean(challenged, na.rm = TRUE),
pct_shot = mean(shot_for, na.rm = TRUE),
pct_cleared = mean(cleared, na.rm = TRUE),
pct_to_head = mean(to_head, na.rm = TRUE),
pct_success = mean(throw_in_success, na.rm = TRUE),
avg_passes = mean(uninterrupted_passes, na.rm = TRUE),
avg_passed_m = mean(distance_passed, na.rm = TRUE),
avg_passed_m_w = mean(distance_passed_wide, na.rm = TRUE),
.groups = 'drop_last')
events_clean <- events %>%
mutate(shot_for = if_else(is.na(shot_for), 0, sign(shot_for)),
challenged = sign(challenged),
location_thirds = if_else(location_x <= 105/3, "Defensive", if_else(location_x >= 105*2/3, "Offensive", "Middle")),
prep_time = if_else(time_since_last_touch <= 5, "short", "long"),
taken_quickly = if_else(time_since_last_touch <= 5, 1, 0),
throw_angle = atan2(abs(PassEndY - location_y), PassEndX - location_x)*180/pi,
throw_angle_class = if_else(throw_angle <= 45, "Forward", if_else(throw_angle >= 135, "Backward", "Straight")),
distance_class = if_else(distance <= 15, "Short", "Long"),
game_state_class = if_else(game_state == 1, "Competitive", "Non-Competitive"),
game_time_class = if_else(minute <= 70, "Regular Play", "Late"),
throw_in_taker = playerId) %>%
left_join(matches %>% select(match_id, league, season), by = "match_id")
agg <- events_clean %>%
group_by(throw_angle_class, distance_class, challenged) %>%
summarize(count = n(),
avg_distance = mean(distance, na.rm = TRUE),
avg_time_to_throw = mean(time_since_last_touch, na.rm = TRUE),
taken_quickly = mean(taken_quickly, na.rm = TRUE),
pct_challenged = mean(challenged, na.rm = TRUE),
pct_shot = mean(shot_for, na.rm = TRUE),
pct_cleared = mean(cleared, na.rm = TRUE),
pct_to_head = mean(to_head, na.rm = TRUE),
pct_success = mean(throw_in_success, na.rm = TRUE),
avg_passes = mean(uninterrupted_passes, na.rm = TRUE),
avg_passed_m = mean(distance_passed, na.rm = TRUE),
avg_passed_m_w = mean(distance_passed_wide, na.rm = TRUE),
.groups = 'drop_last')
View(agg)
shiny::runApp('Documents/GitHub/soccer-analytics-library')
